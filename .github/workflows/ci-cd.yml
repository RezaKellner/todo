name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  APP_IMAGE_NAME: ${{ github.repository }}-app
  DB_IMAGE_NAME: ${{ github.repository }}-db

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for app
      id: meta-app
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-

    - name: Build and push app image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-app.outputs.tags }}
        labels: ${{ steps.meta-app.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create database Dockerfile
      run: |
        cat <<EOF > Dockerfile.db
        FROM postgres:15-alpine
        ENV POSTGRES_DB=todoapp
        ENV POSTGRES_USER=todouser
        ENV POSTGRES_PASSWORD=todopass
        COPY ./db/init.sql /docker-entrypoint-initdb.d/
        EOF
      if: always()

    - name: Extract metadata for database
      id: meta-db
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.DB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-

    - name: Build and push database image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.db
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-db.outputs.tags }}
        labels: ${{ steps.meta-db.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          /tmp/build.log
          /tmp/docker.log